version: "3.8"

services:
  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - security-tools
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Script de inicialização
    restart: unless-stopped

  sonarqube:
    image: sonarqube:25.2.0.102705-community
    container_name: sonarqube
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonar
      SONAR_JDBC_USERNAME: ${POSTGRES_USER}
      SONAR_JDBC_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "9000:9000"
    networks:
      - security-tools
    restart: unless-stopped

  dependency-track-api:
    image: dependencytrack/apiserver
    container_name: dependency-track-api
    environment:
      POSTGRES_URL: jdbc:postgresql://postgres:5432/dtrack
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      ALPINE_DATABASE_MODE: external
      SYSTEM_REQUIREMENT_CHECK_ENABLED: "false"
    ports:
      - "8081:8080"
    networks:
      - security-tools
    depends_on:
      - postgres
    restart: unless-stopped

  dependency-track-frontend:
    image: dependencytrack/frontend
    container_name: dependency-track-frontend
    environment:
      API_BASE_URL: "http://localhost:8081"
    ports:
      - "8080:8080"
    networks:
      - security-tools
    depends_on:
      - dependency-track-api
    restart: unless-stopped

networks:
  security-tools:
    driver: bridge

volumes:
  postgres_data:
