#spring.datasource.url: jdbc:h2:mem:[database-name] for In-memory database
# and jdbc:h2:file:[path/database-name] for disk-based database.
spring.datasource.url=jdbc:h2:file:./tutorialsdb.h2
#For a pooling DataSource to be created we need to be able to verify
# that a valid Driver class is available, so we check for that before doing anything.
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

#spring.jpa.show-sql=true
#Dialect in Hibernate ? Dialect is a class and a bridge between Java JDBC types
# and SQL types, which contains mapping between java language data type and database datatype.
# Dialect allows Hibernate to generate SQL optimized for a particular relational database.
# Hibernate generates queries for the specific database based on the Dialect class.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
#This property takes an enum that controls the schema generation
spring.jpa.hibernate.ddl-auto= update
#spring.h2.console.enabled=true tells the Spring to start H2 Database administration tool
# and you can access this tool on the browser: http://localhost:8080/h2-console.
spring.h2.console.enabled=true
#spring.h2.console.path=/h2-ui is for H2 console?s url,
# so the default url http://localhost:8080/h2-console
# will change to http://localhost:8080/h2-ui.
spring.h2.console.path=/h2-ui

logging.level.org.hibernate.SQL="${LOGGING_LEVEL_PROJECT:ERROR}"

